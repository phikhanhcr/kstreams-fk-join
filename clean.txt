package io.debezium.examples.kstreams.fkjoin.streams;

import java.util.Collections;
import java.util.function.Function;

import javax.enterprise.context.ApplicationScoped;
import javax.enterprise.inject.Produces;

import org.apache.kafka.common.serialization.Serde;
import org.apache.kafka.common.serialization.Serdes;
import org.apache.kafka.streams.KeyValue;
import org.apache.kafka.streams.StreamsBuilder;
import org.apache.kafka.streams.Topology;
import org.apache.kafka.streams.kstream.Consumed;
import org.apache.kafka.streams.kstream.Grouped;
import org.apache.kafka.streams.kstream.KTable;
import org.apache.kafka.streams.kstream.Materialized;
import org.apache.kafka.streams.kstream.Produced;
import org.eclipse.microprofile.config.inject.ConfigProperty;

import io.debezium.examples.kstreams.fkjoin.model.TopicHashtag;
import io.debezium.examples.kstreams.fkjoin.model.TopicAndTopicHashtag;
import io.debezium.examples.kstreams.fkjoin.model.Topic;
import io.debezium.examples.kstreams.fkjoin.model.TopicWithTopicHashtags;
import io.debezium.serde.DebeziumSerdes;
import io.quarkus.kafka.client.serialization.JsonbSerde;

@ApplicationScoped
public class TopologyProducer {

    @ConfigProperty(name = "customers.topic")
    String topicsTopic;

    @ConfigProperty(name = "addresses.topic")
    String topicHashtagsTopic;

    @ConfigProperty(name = "customers.with.addresses.topic")
    String topicsWithTopicHashtagsTopic;

    @Produces
    public Topology buildTopology() {
        StreamsBuilder builder = new StreamsBuilder();

        Serde<String> topicHashtagKeySerde = DebeziumSerdes.payloadJson(String.class);
        topicHashtagKeySerde.configure(Collections.emptyMap(), true);
        Serde<TopicHashtag> topicHashtagSerde = DebeziumSerdes.payloadJson(TopicHashtag.class);
        topicHashtagSerde.configure(Collections.singletonMap("from.field", "after"), false);

        Serde<String> topicKeySerde = DebeziumSerdes.payloadJson(String.class);
        topicKeySerde.configure(Collections.emptyMap(), true);
        Serde<Topic> topicSerde = DebeziumSerdes.payloadJson(Topic.class);
        topicSerde.configure(Collections.singletonMap("from.field", "after"), false);

        JsonbSerde<TopicAndTopicHashtag> topicAndTopicHashtagSerde = new JsonbSerde<>(TopicAndTopicHashtag.class);
        JsonbSerde<TopicWithTopicHashtags> topicWithTopicHashtagSerde = new JsonbSerde<>(TopicWithTopicHashtags.class);

        KTable<String, TopicHashtag> topichashtags = builder.table(
                topicHashtagsTopic,
                Consumed.with(topicHashtagKeySerde, topicHashtagSerde)
        );

        KTable<String, Topic> customers = builder.table(
                topicsTopic,
                Consumed.with(topicKeySerde, topicSerde)
        );

        KTable<String, TopicWithTopicHashtags> topicsWithTopicHashtags = topichashtags.join(
                customers,
                topichashtag -> topichashtag.topic_id,
                TopicAndTopicHashtag::new,
                Materialized.with(Serdes.String(), topicAndTopicHashtagSerde)
            )
            .groupBy(
                (topicHashtagId, topicAndTopicHashtag) -> KeyValue.pair(topicAndTopicHashtag.topic._id, topicAndTopicHashtag),
                Grouped.with(Serdes.String(), topicAndTopicHashtagSerde)
            )
            .aggregate(
                TopicWithTopicHashtags::new,
                (topicId, topicAndTopicHashtag, aggregate) -> aggregate.addTopicHashtag(topicAndTopicHashtag),
                (topicId, topicAndTopicHashtag, aggregate) -> aggregate.removeTopicHashtag(topicAndTopicHashtag),
                Materialized.with(Serdes.String(), topicWithTopicHashtagSerde)
            );

        topicsWithTopicHashtags.toStream()
        .to(
                topicsWithTopicHashtagsTopic,
                Produced.with(Serdes.String(), topicWithTopicHashtagSerde)
        );

        return builder.build();
    }
}
